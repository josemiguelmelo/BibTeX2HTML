/*options {
	LOOKAHEAD=2;
}*/

PARSER_BEGIN(BibTex)

	public class BibTex {
		private static String fileToParse;
		public static void main(String args[]) throws ParseException {

			System.out.println("====================================\n");
			System.out.println(args[0] + " is being parsed.\n");
			System.out.println("====================================\n");

			fileToParse = args[0];

			try{
				BibTex parser = new BibTex(new java.io.FileInputStream(fileToParse));
				SimpleNode root = parser.Start();

				root.dump("");
			}
			
	        catch(java.io.FileNotFoundException e) {
	          System.out.println ("The file was not found.");
	          return;
	        }
		}
	}

PARSER_END(BibTex)

SKIP :
{
	" " | "\t" | "\r" | "\n"
}

TOKEN :
{
	< OPEN_BRACKET : "{" > |
	< CLOSE_BRACKET : "}" > |
	< EQUAL : "=" > |
	< CONCAT : "#" > |
	< QUOTE : "\"" > |
	< COMMA : "," > |
	< ARTICLE : "@article" > | 
	< BOOK : "@book" > |
	< BOOKLET : "@booklet" > |
	< CONFERENCE : "@conference" > |
	< INBOOK : "@inbook" > |
	< INCOLLECTION : "@incollection" > |
	< INPROCEEDINGS : "@inproceedings" > |
	< MANUAL : "@manual" > |


	< MASTERTHESIS : "@masterthesis" > |
	< MISC : "@misc" > |
	< PHDTHESIS : "@phdthesis" > |
	< PROCEEDINGS : "@proceedings" > |
	< TECHREPORT : "@techreport" > |
	< UNPUBLISHED : "@unpublished" > |
	< AUTHOR : "author" > |
	< TITLE : "title" > |
	< YEAR : "year" > |
	< NUMBER : "number" > |
	< PAGES : "pages" > |
	< MONTH : "month" > |
	< NOTE : "note" > |
	< KEY : "key" > |
	< EDITOR : "editor" > |
	< PUBLISHER : "publisher" > |


	< ADDRESS : "address" > |
	< SERIES : "series" > |
	< EDITION : "edition" > |
	< HOWPUBLISHED : "howpublished" > |
	< CHAPTER : "chapter" > |
	< TYPE : "type" > |
	< ANNOTE : "annote" > |
	< BOOKTITLE : "booktitle" > |
	< CROSSREF : "crossref" > |
	< INSTITUTION : "institution" > |
	< JOURNAL : "journal" > |
	< ORGANIZATION : "organization" > |
	< SCHOOL : "school" > |
	< VOLUME : "volume" > |
	< DIGITS : (["0" - "9"])+ >

}

TOKEN :
{
	< PAGESINPUT : <QUOTE><DIGITS>(("-"|",")<DIGITS>)?<QUOTE> >
}

TOKEN :
{
	< STRING : (( <QUOTE> (["a"-"z", "A"-"Z"," ", "-"]|<DIGITS>)+ <QUOTE>) 
		| (["a"-"z", "A"-"Z", "-"]|<DIGITS>)+
		| ( <OPEN_BRACKET> (["a"-"z", "A"-"Z"," ", "-"]|<DIGITS>)+ <CLOSE_BRACKET>))>
}


SimpleNode Start() : {}
{
	Expr() {return jjtThis;}
}

void Expr() : {}
{

try{
	(Language())*
}catch(Exception e){
	System.out.println("Invalid format found.\n");
}
	
}


/** 
 *****    ****** BibTex Params  **** ******
**/


void Author(): {} 
{
	<AUTHOR> <EQUAL> <STRING>
}

void Title():{}
{
	<TITLE> <EQUAL> <STRING>
}

void Year():{}
{
	<YEAR> <EQUAL> <DIGITS> 
}


void Pages():{}
{
	<PAGES> <EQUAL> <PAGESINPUT> 
}
	

void Month():{}
{
	<MONTH> <EQUAL> <STRING>
}
	

void Note():{}
{
	<NOTE> <EQUAL> <STRING>
}
	

void Key():{}
{
	<KEY> <EQUAL> <STRING>
}
	
	
void Editor():{}
{
	<EDITOR> <EQUAL> <STRING>
}
	
void Publisher(): {}
{
	<PUBLISHER> <EQUAL> <STRING>
}

void Number():{}
{
	<NUMBER> <EQUAL> <DIGITS> 
}


void Address():{}
{
	<ADDRESS> <EQUAL> <STRING>
}

void Series():{}
{
	<SERIES> <EQUAL> <STRING>
}

void Edition():{}
{
	<EDITION> <EQUAL> <STRING>
}

void HowPublished():{}
{
	<HOWPUBLISHED> <EQUAL> <STRING>
}

void Chapter():{}
{
	<CHAPTER> <EQUAL> <STRING>
}

void Type():{}
{
	<TYPE> <EQUAL> <STRING>
}


void Annote():{}
{
        <ANNOTE> <EQUAL> <STRING>
}

void BookTitle():{}
{
        <BOOKTITLE> <EQUAL> <STRING>
}

void CrossRef():{}
{
        <CROSSREF> <EQUAL> <STRING>
}

void Institution():{}
{
        <INSTITUTION> <EQUAL> <STRING>
}

void Journal():{}
{
        <JOURNAL> <EQUAL> <STRING>
}
void Organization():{}
{
        <ORGANIZATION> <EQUAL> <STRING>
}

void School():{}
{
        <SCHOOL> <EQUAL> <STRING>
}

void Volume():{}
{
        <VOLUME> <EQUAL> <STRING>
}


/** 
 *****    ****** BibTex Classes  **** ******
**/
	
void Article() :{}
{
	<ARTICLE>
}

void Book() :{}
{
	<BOOK>
}

void Booklet() :{}
{
	<BOOKLET>
}

void Conference() :{}
{
	<CONFERENCE>
}
void Inbook() :{}
{
	<INBOOK>
}

void Incollection() :{}
{
	<INCOLLECTION>
}
void Inproceedings() :{}
{
	<INPROCEEDINGS>
}

void Manual() :{}
{
	<MANUAL>
}


void Masterthesis() :{}
{
	<MASTERTHESIS>
}

void Misc() :{}
{
	<MISC>
}

void PhdThesis() :{}
{
	<PHDTHESIS>
}
void Proceedings() :{}
{
	<PROCEEDINGS>
}
void TechReport() :{}
{
	<TECHREPORT>
}
void Unpublished() :{}
{
	<UNPUBLISHED>
}


/** 
 *** **** ** ** Language Class **** * ***** ** **
 **/
void Class() : {}
{
	Article() | Book() | Booklet() | Conference() | Inbook() | Incollection() | Inproceedings() | Manual() | Masterthesis() |
	Misc() | PhdThesis() | Proceedings() | TechReport() | Unpublished()
}

/** 
 *** **** ** ** Language Body **** * ***** ** **
 **/
void Body():{}
{
	(<COMMA>
	(Params())?
	)*
}

/** 
 *** **** ** ** Language Params **** * ***** ** **
 **/
void Params(): {}
{
	(Author() | Title() | Year() | Number() | Pages() | Month() | Note() | Key() | Editor() | Publisher() | Address() | Series() |
	Edition() | HowPublished() | Chapter() | Type() | Annote() | BookTitle() | CrossRef() | Institution() | Journal() | Organization() |
	School() | Volume())
}

void Language() : {Token mainClass, id;}
{
	Class()
	<OPEN_BRACKET>

	id = <STRING>

	{System.out.println(id.image + " being parsed...\n");}

	Body()

	{System.out.println("Body has been parsed.\n");}
	<CLOSE_BRACKET>

	{System.out.println(id.image + " parsed successfully.\n");}
}

