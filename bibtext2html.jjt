options {
	LOOKAHEAD=2;
}

PARSER_BEGIN(BibTex)

	public class BibTex {
		private static String fileToParse;
		public static void main(String args[]) throws ParseException {

			System.out.println("====================================\n");
			System.out.println(args[0] + " is being parsed.\n");
			System.out.println("====================================\n");

			fileToParse = args[0];

			try{
				BibTex parser = new BibTex(new java.io.FileInputStream(fileToParse));
				SimpleNode root = parser.Start();

				root.dump("");
			}
			
	        catch(java.io.FileNotFoundException e) {
	          System.out.println ("The file was not found.");
	          return;
	        }
		}
	}

PARSER_END(BibTex)

SKIP :
{
	" " | "\t" | "\r" | "\n"
}

TOKEN :
{
	< OPEN_BRACKET : "{" > |
	< CLOSE_BRACKET : "}" > |
	< EQUAL : "=" > |
	< CONCAT : "#" > |
	< QUOTE : "\"" > |
	< COMMA : "," > |
	< ARTICLE : "@article" > | 
	< BOOK : "@book" > |
	< BOOKLET : "@booklet" > |
	< CONFERENCE : "@conference" > |
	< INBOOK : "@inbook" > |
	< INCOLLECTION : "@incollection" > |
	< INPROCEEDINGS : "@inproceedings" > |
	< MANUAL : "@manual" > |


	< MASTERTHESIS : "@masterthesis" > |
	< MISC : "@misc" > |
	< PHDTHESIS : "@phdthesis" > |
	< PROCEEDINGS : "@proceedings" > |
	< TECHREPORT : "@techreport" > |
	< UNPUBLISHED : "@unpublished" > |
	< AUTHOR : "author" > |
	< TITLE : "title" > |
	< YEAR : "year" > |
	< NUMBER : "number" > |
	< PAGES : "pages" > |
	< MONTH : "month" > |
	< NOTE : "note" > |
	< KEY : "key" > |
	< EDITOR : "editor" > |
	< PUBLISHER : "publisher" > |


	< ADDRESS : "address" > |
	< SERIES : "series" > |
	< EDITION : "edition" > |
	< HOWPUBLISHED : "howpublished" > |
	< CHAPTER : "chapter" > |
	< TYPE : "type" > |
	< ANNOTE : "annote" > |
	< BOOKTITLE : "booktitle" > |
	< CROSSREF : "crossref" > |
	< INSTITUTION : "institution" > |
	< JOURNAL : "journal" > |
	< ORGANIZATION : "organization" > |
	< SCHOOL : "school" > |
	< VOLUME : "volume" > |
	< DIGITS : (["0" - "9"])+ >

}

TOKEN :
{
	< PAGESINPUT : <QUOTE><DIGITS>(("-"|",")<DIGITS>)?<QUOTE> >
}

TOKEN :
{
	< STRING : (( <QUOTE> (["a"-"z", "A"-"Z"," ", "-"]|<DIGITS>)+ <QUOTE>) 
		| (["a"-"z", "A"-"Z", "-"]|<DIGITS>)+
		| ( <OPEN_BRACKET> (["a"-"z", "A"-"Z"," ", "-"]|<DIGITS>)+ <CLOSE_BRACKET>))>
}


SimpleNode Start() : {}
{
	Expr() {return jjtThis;}
}

void Expr() : {}
{

try{
	(ArticleExpr() 
	| 
	BookExpr()
	|
	BookletExpr()
	|
	ConferenceExpr()
	|
	InbookExpr()
	|
	IncollectionExpr()
	)*
}catch(Exception e){
	System.out.println("Invalid format found.\n");
}
	
}

void Author(): {} 
{
	<AUTHOR> <EQUAL> <STRING>
}

void Title():{}
{
	<TITLE> <EQUAL> <STRING>
}

void Year():{}
{
	<YEAR> <EQUAL> <DIGITS> 
}


void Pages():{}
{
	<PAGES> <EQUAL> <PAGESINPUT> 
}
	

void Month():{}
{
	<MONTH> <EQUAL> <STRING>
}
	

void Note():{}
{
	<NOTE> <EQUAL> <STRING>
}
	

void Key():{}
{
	<KEY> <EQUAL> <STRING>
}
	
	
void Editor():{}
{
	<EDITOR> <EQUAL> <STRING>
}
	
void Publisher(): {}
{
	<PUBLISHER> <EQUAL> <STRING>
}

void Number():{}
{
	<NUMBER> <EQUAL> <DIGITS> 
}


void Address():{}
{
	<ADDRESS> <EQUAL> <STRING>
}

void Series():{}
{
	<SERIES> <EQUAL> <STRING>
}

void Edition():{}
{
	<SERIES> <EQUAL> <STRING>
}

void HowPublished():{}
{
	<HOWPUBLISHED> <EQUAL> <STRING>
}

void Chapter():{}
{
	<CHAPTER> <EQUAL> <STRING>
}

void Type():{}
{
	<TYPE> <EQUAL> <STRING>
}


void Annote():{}
{
        <ANNOTE> <EQUAL> <STRING>
}

void BookTitle():{}
{
        <BOOKTITLE> <EQUAL> <STRING>
}

void CrossRef():{}
{
        <CROSSREF> <EQUAL> <STRING>
}

void Institution():{}
{
        <INSTITUTION> <EQUAL> <STRING>
}

void Journal():{}
{
        <JOURNAL> <EQUAL> <STRING>
}
void Organization():{}
{
        <ORGANIZATION> <EQUAL> <STRING>
}

void School():{}
{
        <SCHOOL> <EQUAL> <STRING>
}

void Volume():{}
{
        <VOLUME> <EQUAL> <STRING>
}

/** Article **/
void ArticleExpr() : {Token id;}
{


	<ARTICLE>
		<OPEN_BRACKET>
		
		id = <STRING>

		{System.out.println(id.image + " being parsed....\n");}

		<COMMA>

		ArticleRequirements()

		(ArticleOptional())*
		(<COMMA>)?


	 	<CLOSE_BRACKET>
		{System.out.println(id.image + " parsed successfully.\n");}
}

void ArticleRequirements(): {}
{
	Author() <COMMA>
	Title() <COMMA>
	Journal() <COMMA>
	Year()
}

void ArticleOptional(): {}
{
	<COMMA> // last fixed
	( 
		((<VOLUME> | <NUMBER> | <MONTH> | <NOTE> | <KEY>) <EQUAL> <STRING>)  |
		<PAGES> <EQUAL> <PAGESINPUT> 
	)
}



/** BOOK **/

void BookExpr() : {Token id;}
{
	<BOOK>
		<OPEN_BRACKET>
			id = <STRING>
		{System.out.println(id.image + " being parsed....\n");}


			<COMMA>

			BookRequirements()
			(BookOptional())*
			(<COMMA>)?


	 	<CLOSE_BRACKET>
			{System.out.println(id.image + " parsed successfully.\n");}
}



void BookRequirements(): {}
{
	<AUTHOR> <EQUAL> <STRING> <COMMA>
	<TITLE> <EQUAL> <STRING> <COMMA>
	<PUBLISHER> <EQUAL> <STRING> <COMMA>
	<YEAR> <EQUAL> <DIGITS>
}

void BookOptional(): {}
{
	<COMMA>
	(<VOLUME> | <SERIES> | <ADDRESS> | <EDITION> | <MONTH> | <CROSSREF> | <NOTE> )
	<EQUAL> <STRING>
}






/** BOOKLET **/
void BookletExpr() : {Token id; }
{
	<BOOKLET>
		<OPEN_BRACKET>
			id = <STRING>
		{System.out.println(id.image + " being parsed....\n");}

			

			<COMMA>

			BookletRequirements()

			(BookletOptional())*

			(<COMMA>)?


	 	<CLOSE_BRACKET>

	 	{System.out.println(id.image + " parsed successfully.\n");}

}

void BookletRequirements(): {}
{
	<TITLE> <EQUAL> <STRING>
}



void BookletOptional(): {}
{
	<COMMA>
	(((<AUTHOR> | <HOWPUBLISHED> | <ADDRESS> | <MONTH> | <CROSSREF> | <NOTE>)
	<EQUAL> <STRING>) | <YEAR> <EQUAL> <DIGITS> )
}


/** CONFERENCE **/

void ConferenceExpr() : {Token id;}
{
	<CONFERENCE>
	<OPEN_BRACKET>
		id = <STRING>
		{System.out.println(id.image + " being parsed....\n");}


		<COMMA>

		ConferenceRequirements()
		(ConferenceOptional())*
		(<COMMA>)?

	<CLOSE_BRACKET>

	{System.out.println(id.image + " parsed successfully.\n");}
}


void ConferenceRequirements() : {Token author;}
{
	<AUTHOR> <EQUAL> <STRING> <COMMA>
	<TITLE> <EQUAL> <STRING> <COMMA>
	<BOOKTITLE> <EQUAL> <STRING> <COMMA>
	<YEAR> <EQUAL> <DIGITS>

	
}


void ConferenceOptional(): {}
{
	<COMMA>
	(
	( (<EDITOR> | <VOLUME> | <SERIES> | <ADDRESS> | <MONTH> | <ORGANIZATION> | <PUBLISHER> | <CROSSREF> | <NOTE> ) <EQUAL> <STRING> ) |
		( <PAGES> <EQUAL> <PAGESINPUT>)
	)
}


/** INBOOK **/

void InbookExpr() : {Token id;}
{
	<INBOOK>
	<OPEN_BRACKET>
		id = <STRING>
		{System.out.println(id.image + " being parsed....\n");}


		<COMMA>

		InbookRequirements()
		(InbookOptional())*
		(<COMMA>)?

	<CLOSE_BRACKET>


		{System.out.println(id.image + " parsed successfully.\n");}
}


void InbookRequirements() : {Token author;}
{
	<AUTHOR> <EQUAL> <STRING> <COMMA>
	<TITLE> <EQUAL> <STRING> <COMMA>
	<CHAPTER> <EQUAL> <STRING> <COMMA>
	<PUBLISHER> <EQUAL> <STRING> <COMMA>
	<YEAR> <EQUAL> <DIGITS>
}


void InbookOptional(): {}
{
	<COMMA>
	(<VOLUME> | <SERIES> | <TYPE> | <ADDRESS> | <MONTH> | <EDITION> | <CROSSREF> | <NOTE> )
	<EQUAL> <STRING>
}




/** INCOLLECTION **/

void IncollectionExpr() : {Token id;}
{
	<INCOLLECTION>
	<OPEN_BRACKET>
		id = <STRING>
		{System.out.println(id.image + " being parsed....\n");}

		<COMMA>

		IncollectionRequirements()
		(IncollectionOptional())*
		(<COMMA>)?

	<CLOSE_BRACKET>



		{System.out.println(id.image + " parsed successfully.\n");}
}


void IncollectionRequirements() : {}
{
	<AUTHOR> <EQUAL> <STRING> <COMMA>
	<TITLE> <EQUAL> <STRING> <COMMA>
	<BOOKTITLE> <EQUAL> <STRING> <COMMA>
	<PUBLISHER> <EQUAL> <STRING> <COMMA>
	<YEAR> <EQUAL> <DIGITS>
}


void IncollectionOptional(): {}
{
	<COMMA>
	(
		((<EDITOR> | <VOLUME> | <SERIES> | <TYPE> | <CHAPTER> | <ADDRESS> | <EDITION> | <ORGANIZATION> | 
		<PUBLISHER> | <MONTH> | <CROSSREF> | <NOTE> ) <EQUAL> <STRING>) 
		|
		(<PAGES> <EQUAL> <PAGESINPUT> )
	)
}

