/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. bibtext2html.jj */
/*@egen*/options {
	LOOKAHEAD=2;
}

PARSER_BEGIN(BibTex)

	public class BibTex/*@bgen(jjtree)*/implements BibTexTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTBibTexState jjtree = new JJTBibTexState();

/*@egen*/
		public static void main(String args[]) throws ParseException {

			System.out.println("Working Directory = " +
              System.getProperty("user.dir"));

			try{
				BibTex parser = new BibTex(new java.io.FileInputStream("C:\\Users\\Tiago\\Desktop\\COMP\\BibTeX2HTML\\lol.bib"));
				SimpleNode root = parser.Start();

				root.dump("");
			}
			
	        catch(java.io.FileNotFoundException e) {
	          System.out.println ("The file was not found.");
	          return;
	        }
		}
	}

PARSER_END(BibTex)

SKIP :
{
	" " | "\t" | "\r" | "\n"
}

TOKEN :
{
	< OPEN_BRACKET : "{" > |
	< CLOSE_BRACKET : "}" > |
	< EQUAL : "=" > |
	< CONCAT : "#" > |
	< QUOTE : "\"" > |
	< COMMA : "," > |

	< ARTICLE : "@article" > | 
	< BOOK : "@book" > |
	< BOOKLET : "@booklet" > |
	< CONFERENCE : "@conference" > |
	< INBOOK : "@inbook" > |
	< INCOLLECTION : "@incollection" > |
	< INPROCEEDINGS : "@inproceedings" > |
	< MANUAL : "@manual" > |
	< MASTERTHESIS : "@masterthesis" > |
	< MISC : "@misc" > |
	< PHDTHESIS : "@phdthesis" > |
	< PROCEEDINGS : "@proceedings" > |
	< TECHREPORT : "@techreport" > |
	< UNPUBLISHED : "@unpublished" > |


	< AUTHOR : "author" > |
	< TITLE : "title" > |
	< YEAR : "year" > |
	< NUMBER : "number" > |
	< PAGES : "pages" > |
	< MONTH : "month" > |
	< NOTE : "note" > |
	< KEY : "key" > |
	< EDITOR : "editor" > |
	< PUBLISHER : "publisher" > |
	< ADDRESS : "address" > |
	< SERIES : "series" > |
	< EDITION : "edition" > |
	< HOWPUBLISHED : "howpublished" > |
	< CHAPTER : "chapter" > |
	< TYPE : "type" > |
	< ANNOTE : "annote" > |
	< BOOKTITLE : "booktitle" > |
	< CROSSREF : "crossref" > |
	< INSTITUTION : "institution" > |
	< JOURNAL : "journal" > |
	< ORGANIZATION : "organization" > |
	< SCHOOL : "school" > |
	< VOLUME : "volume" > |
	< DIGITS : (["0" - "9"])+ >

}

TOKEN :
{
	< STRING : (( <QUOTE> (["a"-"z", "A"-"Z"," ", "-"]|<DIGITS>)+ <QUOTE>) 
		| (["a"-"z", "A"-"Z", "-"]|<DIGITS>)+) >
}


SimpleNode Start() : {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	Expr()/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr() : {/*@bgen(jjtree) Expr */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr */
        try {
/*@egen*/

	ArticleExpr() 
	| 
	BookExpr()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

void ArticleExpr() : {/*@bgen(jjtree) ArticleExpr */
                      SimpleNode jjtn000 = new SimpleNode(JJTARTICLEEXPR);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token id;}
{/*@bgen(jjtree) ArticleExpr */
        try {
/*@egen*/
	<ARTICLE>
		<OPEN_BRACKET>
		
		id = <STRING>

		{System.out.println("Article id = " + id.image + "\n");}

		<COMMA>

		ArticleRequirements()

		(ArticleOptional())*
		(<COMMA>)?


	 	<CLOSE_BRACKET>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BookExpr() : {/*@bgen(jjtree) BookExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOKEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BookExpr */
        try {
/*@egen*/
	<BOOK>
		<OPEN_BRACKET>

	 	<CLOSE_BRACKET>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArticleRequirements(): {/*@bgen(jjtree) ArticleRequirements */
  SimpleNode jjtn000 = new SimpleNode(JJTARTICLEREQUIREMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArticleRequirements */
        try {
/*@egen*/
	<AUTHOR> <EQUAL> <STRING> <COMMA>
	<TITLE> <EQUAL> <STRING> <COMMA>
	<JOURNAL> <EQUAL> <STRING> <COMMA>
	<YEAR> <EQUAL> <DIGITS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArticleOptional(): {/*@bgen(jjtree) ArticleOptional */
  SimpleNode jjtn000 = new SimpleNode(JJTARTICLEOPTIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArticleOptional */
        try {
/*@egen*/
	<COMMA> // last fixed
	(<VOLUME> | <NUMBER> | <PAGES> | <MONTH> | <NOTE> | <KEY>)
	<EQUAL> <STRING>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}