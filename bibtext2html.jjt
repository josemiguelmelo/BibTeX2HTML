/*options {
	LOOKAHEAD=2;
}*/

PARSER_BEGIN(BibTex)

import java.util.*;

public class BibTex {
	private static String fileToParse;


	public String paramName;

	private static Semantic semantic;

	public static void main(String args[]) throws ParseException {

		semantic = new Semantic();

		System.out.println("====================================\n");
		System.out.println(args[0] + " is being parsed.\n");
		System.out.println("====================================\n");

		fileToParse = args[0];

		try{
			BibTex parser = new BibTex(new java.io.FileInputStream(fileToParse));
			SimpleNode root = parser.Start();

			//root.dump("");

			parser.eval(root);
		}
		
        catch(java.io.FileNotFoundException e) {
          System.out.println ("The file was not found.");
          return;
        }
	}

	public HashMap<String, String> getBodyParams(SimpleNode bodyNode){
		HashMap<String, String> params = new HashMap<String, String>();
		for(int i = 0; i < bodyNode.jjtGetNumChildren() ; i++){
			SimpleNode param = (SimpleNode) bodyNode.jjtGetChild(i);

			if(param.jjtGetNumChildren()!=0){
				SimpleNode paramChildNode = (SimpleNode) param.jjtGetChild(0);
				String paramName = paramChildNode.paramName;
				String paramValueClean = semantic.cleanTokens((String)paramChildNode.value);

				params.put(paramName, paramValueClean);
			}
		}
		return params;
	}


	public int evalLanguage(SimpleNode classNode, SimpleNode bodyNode)
	{
		SimpleNode classChildNode = (SimpleNode) classNode.jjtGetChild(0);
		String className = classChildNode.className;

		HashMap<String, String> bodyParams = getBodyParams(bodyNode);

		if(semantic.evalParams(bodyParams, className) == false){
		}
		return 0;
	}

	public int eval(SimpleNode node)
	{
		if(node.jjtGetNumChildren() == 0)
			return 0;
		else if(node.jjtGetNumChildren() == 1){
			SimpleNode childNode = (SimpleNode) node.jjtGetChild(0);
			return this.eval(childNode);
		}
		else if(node.jjtGetNumChildren() == 2 && ((SimpleNode)node.jjtGetChild(0)).toString() == "Class" && 
			((SimpleNode)node.jjtGetChild(1)).toString() == "Body" ){
			
			SimpleNode classChild = (SimpleNode) node.jjtGetChild(0); // class
			SimpleNode bodyChild = (SimpleNode) node.jjtGetChild(1); // body

			return this.evalLanguage(classChild, bodyChild);
		}


		for(int i = 0 ; i < node.jjtGetNumChildren() ; i++)
		{
			this.eval((SimpleNode) node.jjtGetChild(i));
		}

		return 0;
	}
}

PARSER_END(BibTex)

SKIP :
{
	" " | "\t" | "\r" | "\n"
}

TOKEN :
{
	< OPEN_BRACKET : "{" > |
	< CLOSE_BRACKET : "}" > |
	< EQUAL : "=" > |
	< CONCAT : "#" > |
	< QUOTE : "\"" > |
	< COMMA : "," > |
	< ARTICLE : "@article" > | 
	< BOOK : "@book" > |
	< BOOKLET : "@booklet" > |
	< CONFERENCE : "@conference" > |
	< INBOOK : "@inbook" > |
	< INCOLLECTION : "@incollection" > |
	< INPROCEEDINGS : "@inproceedings" > |
	< MANUAL : "@manual" > |


	< MASTERTHESIS : "@masterthesis" > |
	< MISC : "@misc" > |
	< PHDTHESIS : "@phdthesis" > |
	< PROCEEDINGS : "@proceedings" > |
	< TECHREPORT : "@techreport" > |
	< UNPUBLISHED : "@unpublished" > |
	< AUTHOR : "author" > |
	< TITLE : "title" > |
	< YEAR : "year" > |
	< NUMBER : "number" > |
	< PAGES : "pages" > |
	< MONTH : "month" > |
	< NOTE : "note" > |
	< KEY : "key" > |
	< EDITOR : "editor" > |
	< PUBLISHER : "publisher" > |


	< ADDRESS : "address" > |
	< SERIES : "series" > |
	< EDITION : "edition" > |
	< HOWPUBLISHED : "howpublished" > |
	< CHAPTER : "chapter" > |
	< TYPE : "type" > |
	< ANNOTE : "annote" > |
	< BOOKTITLE : "booktitle" > |
	< CROSSREF : "crossref" > |
	< INSTITUTION : "institution" > |
	< JOURNAL : "journal" > |
	< ORGANIZATION : "organization" > |
	< SCHOOL : "school" > |
	< VOLUME : "volume" > |
	< DIGITS : (["0" - "9"])+ >

}

TOKEN :
{
	< PAGESINPUT : <QUOTE> <DIGITS>(("-"|"--")<DIGITS>)? <QUOTE> >
}

TOKEN :
{
	< STRING : (( <QUOTE> (["a"-"z", "A"-"Z"," ", "-"]|<DIGITS>)+ <QUOTE>) 
		| (["a"-"z", "A"-"Z", "-"]|<DIGITS>)+
		| ( <OPEN_BRACKET> (["a"-"z", "A"-"Z"," ", "-"]|<DIGITS>)+ <CLOSE_BRACKET>))>
}


SimpleNode Start() : {}
{
	Expr() {return jjtThis;}
}

void Expr() : {}
{

try{
	(Language())*
}catch(Exception e){
	System.out.println("Invalid format found.\n");
}
	
}


/** 
 *****    ****** BibTex Params  **** ******
**/


void Author(): {Token input;} 
{
	<AUTHOR> <EQUAL> input = <STRING>

	{jjtThis.paramName = "author";}
	{jjtThis.value = input.image;}
}

void Title():{Token input;}
{
	<TITLE> <EQUAL> input = <STRING>
	{jjtThis.paramName = "title";}
	{jjtThis.value = input.image;}
}

void Year():{Token input;}
{
	<YEAR> <EQUAL> input = <DIGITS> 
	{jjtThis.paramName = "year";}
	{jjtThis.value = input.image;}
}


void Pages():{Token input;}
{
	<PAGES> <EQUAL> input = <PAGESINPUT>

	{jjtThis.paramName = "pages";}
	{jjtThis.value = input.image;}
}
	

void Month():{Token input;}
{
	<MONTH> <EQUAL> input = <STRING>
	{jjtThis.paramName = "month";}
	{jjtThis.value = input.image;}
}
	

void Note():{Token input;}
{
	<NOTE> <EQUAL> input = <STRING>
	{jjtThis.paramName = "note";}
	{jjtThis.value = input.image;}
}
	

void Key():{Token input;}
{
	<KEY> <EQUAL> input = <STRING>
	{jjtThis.paramName = "key";}
	{jjtThis.value = input.image;}
}
	
	
void Editor():{Token input;}
{
	<EDITOR> <EQUAL> input = <STRING>
	{jjtThis.paramName = "editor";}
	{jjtThis.value = input.image;}
}
	
void Publisher(): {Token input;}
{
	<PUBLISHER> <EQUAL> input = <STRING>
	{jjtThis.paramName = "publisher";}
	{jjtThis.value = input.image;}
}

void Number():{Token input;}
{
	<NUMBER> <EQUAL> input = <DIGITS> 
	{jjtThis.paramName = "number";}
	{jjtThis.value = input.image;}
}


void Address():{Token input;}
{
	<ADDRESS> <EQUAL> input = <STRING>
	{jjtThis.paramName = "address";}
	{jjtThis.value = input.image;}
}

void Series():{Token input;}
{
	<SERIES> <EQUAL> input = <STRING>
	{jjtThis.paramName = "series";}
	{jjtThis.value = input.image;}
}

void Edition():{Token input;}
{
	<EDITION> <EQUAL> input = <STRING>
	{jjtThis.paramName = "edition";}
	{jjtThis.value = input.image;}
}

void HowPublished():{Token input;}
{
	<HOWPUBLISHED> <EQUAL> input = <STRING>
	{jjtThis.paramName = "howpublished";}
	{jjtThis.value = input.image;}
}

void Chapter():{Token input;}
{
	<CHAPTER> <EQUAL> input = <STRING>
	{jjtThis.paramName = "chapter";}
	{jjtThis.value = input.image;}
}

void Type():{Token input;}
{
	<TYPE> <EQUAL> input = <STRING>
	{jjtThis.paramName = "type";}
	{jjtThis.value = input.image;}
}


void Annote():{Token input;}
{
    <ANNOTE> <EQUAL> input = <STRING>
	{jjtThis.paramName = "annote";}
	{jjtThis.value = input.image;}
}

void BookTitle():{Token input;}
{
    <BOOKTITLE> <EQUAL> input = <STRING>
	{jjtThis.paramName = "booktitle";}
	{jjtThis.value = input.image;}
}

void CrossRef():{Token input;}
{
    <CROSSREF> <EQUAL> input = <STRING>
	{jjtThis.paramName = "crossref";}
	{jjtThis.value = input.image;}
}

void Institution():{Token input;}
{
    <INSTITUTION> <EQUAL> input = <STRING>
	{jjtThis.paramName = "institution";}
	{jjtThis.value = input.image;}
}

void Journal():{Token input;}
{
    <JOURNAL> <EQUAL> input = <STRING>
	{jjtThis.paramName = "journal";}
	{jjtThis.value = input.image;}
}
void Organization():{Token input;}
{
    <ORGANIZATION> <EQUAL> input = <STRING>
	{jjtThis.paramName = "organization";}
	{jjtThis.value = input.image;}
}

void School():{Token input;}
{
    <SCHOOL> <EQUAL> input = <STRING>
	{jjtThis.paramName = "school";}
	{jjtThis.value = input.image;}
}

void Volume():{Token input;}
{
    <VOLUME> <EQUAL> input = <STRING>
	{jjtThis.paramName = "volume";}
	{jjtThis.value = input.image;}
}


/** 
 *****    ****** BibTex Classes  **** ******
**/
	
void Article() :{}
{
	<ARTICLE>
	{jjtThis.className = "article";}
}

void Book() :{}
{
	<BOOK>
	{jjtThis.className = "book";}
}

void Booklet() :{}
{
	<BOOKLET>
	{jjtThis.className = "booklet";}
}

void Conference() :{}
{
	<CONFERENCE>
	{jjtThis.className = "conference";}
}
void Inbook() :{}
{
	<INBOOK>
	{jjtThis.className = "inbook";}
}

void Incollection() :{}
{
	<INCOLLECTION>
	{jjtThis.className = "incollection";}
}
void Inproceedings() :{}
{
	<INPROCEEDINGS>
	{jjtThis.className = "inproceedings";}
}

void Manual() :{}
{
	<MANUAL>
	{jjtThis.className = "manual";}
}


void Masterthesis() :{}
{
	<MASTERTHESIS>
	{jjtThis.className = "masterthesis";}
}

void Misc() :{}
{
	<MISC>
	{jjtThis.className = "misc";}
}

void PhdThesis() :{}
{
	<PHDTHESIS>
	{jjtThis.className = "phdthesis";}
}
void Proceedings() :{}
{
	<PROCEEDINGS>
	{jjtThis.className = "proceedings";}
}
void TechReport() :{}
{
	<TECHREPORT>
	{jjtThis.className = "techreport";}
}
void Unpublished() :{}
{
	<UNPUBLISHED>
	{jjtThis.className = "unpublished";}
}


/** 
 *** **** ** ** Language Class **** * ***** ** **
 **/
void Class() : {}
{
	Article() | Book() | Booklet() | Conference() | Inbook() | Incollection() | Inproceedings() | Manual() | Masterthesis() |
	Misc() | PhdThesis() | Proceedings() | TechReport() | Unpublished()
}

/** 
 *** **** ** ** Language Body **** * ***** ** **
 **/
void Body():{}
{
	(<COMMA>
	(Params())?
	)*
}

/** 
 *** **** ** ** Language Params **** * ***** ** **
 **/
void Params(): {}
{
	(Author() | Title() | Year() | Number() | Pages() | Month() | Note() | Key() | Editor() | Publisher() | Address() | Series() |
	Edition() | HowPublished() | Chapter() | Type() | Annote() | BookTitle() | CrossRef() | Institution() | Journal() | Organization() |
	School() | Volume())
}

void Language() : {Token mainClass, id;}
{
	{ jjtThis.paramName = "language"; }
	Class()
	<OPEN_BRACKET>
	//TODO retornar o id tamb√©m?
	id = <STRING>

	Body()

	<CLOSE_BRACKET>

}

