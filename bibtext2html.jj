/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. bibtext2html.jj */
/*@egen*/options {
	LOOKAHEAD=2;
}

PARSER_BEGIN(BibTex)

	public class BibTex/*@bgen(jjtree)*/implements BibTexTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTBibTexState jjtree = new JJTBibTexState();

/*@egen*/
		private static String fileToParse;
		public static void main(String args[]) throws ParseException {

			System.out.println("Working Directory = " +
              System.getProperty("user.dir"));

			System.out.println("File = " + args[0]);

			fileToParse = args[0];

			try{
				BibTex parser = new BibTex(new java.io.FileInputStream(fileToParse));
				SimpleNode root = parser.Start();

				root.dump("");
			}
			
	        catch(java.io.FileNotFoundException e) {
	          System.out.println ("The file was not found.");
	          return;
	        }
		}
	}

PARSER_END(BibTex)

SKIP :
{
	" " | "\t" | "\r" | "\n"
}

TOKEN :
{
	< OPEN_BRACKET : "{" > |
	< CLOSE_BRACKET : "}" > |
	< EQUAL : "=" > |
	< CONCAT : "#" > |
	< QUOTE : "\"" > |
	< COMMA : "," > |

	< ARTICLE : "@article" > | 
	< BOOK : "@book" > |
	< BOOKLET : "@booklet" > |
	< CONFERENCE : "@conference" > |
	< INBOOK : "@inbook" > |
	< INCOLLECTION : "@incollection" > |
	< INPROCEEDINGS : "@inproceedings" > |
	< MANUAL : "@manual" > |
	< MASTERTHESIS : "@masterthesis" > |
	< MISC : "@misc" > |
	< PHDTHESIS : "@phdthesis" > |
	< PROCEEDINGS : "@proceedings" > |
	< TECHREPORT : "@techreport" > |
	< UNPUBLISHED : "@unpublished" > |


	< AUTHOR : "author" > |
	< TITLE : "title" > |
	< YEAR : "year" > |
	< NUMBER : "number" > |
	< PAGES : "pages" > |
	< MONTH : "month" > |
	< NOTE : "note" > |
	< KEY : "key" > |
	< EDITOR : "editor" > |
	< PUBLISHER : "publisher" > |
	< ADDRESS : "address" > |
	< SERIES : "series" > |
	< EDITION : "edition" > |
	< HOWPUBLISHED : "howpublished" > |
	< CHAPTER : "chapter" > |
	< TYPE : "type" > |
	< ANNOTE : "annote" > |
	< BOOKTITLE : "booktitle" > |
	< CROSSREF : "crossref" > |
	< INSTITUTION : "institution" > |
	< JOURNAL : "journal" > |
	< ORGANIZATION : "organization" > |
	< SCHOOL : "school" > |
	< VOLUME : "volume" > |
	< DIGITS : (["0" - "9"])+ >

}

TOKEN :
{
	< STRING : (( <QUOTE> (["a"-"z", "A"-"Z"," ", "-"]|<DIGITS>)+ <QUOTE>) 
		| (["a"-"z", "A"-"Z", "-"]|<DIGITS>)+
		| ( <OPEN_BRACKET> (["a"-"z", "A"-"Z"," ", "-"]|<DIGITS>)+ <CLOSE_BRACKET>))>

	|

	< PAGESINPUT : <QUOTE><DIGITS>(("-"|",")<DIGITS>)?<QUOTE> >
}


SimpleNode Start() : {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	Expr()/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr() : {/*@bgen(jjtree) Expr */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr */
        try {
/*@egen*/

	(ArticleExpr() 
	| 
	BookExpr()
	|
	BookletExpr()
	|
	ConferenceExpr()
	|
	InbookExpr()
	|
	IncollectionExpr()
	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

/** Article **/
void ArticleExpr() : {/*@bgen(jjtree) ArticleExpr */
                      SimpleNode jjtn000 = new SimpleNode(JJTARTICLEEXPR);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token id;}
{/*@bgen(jjtree) ArticleExpr */
        try {
/*@egen*/
	<ARTICLE>
		<OPEN_BRACKET>
		
		id = <STRING>

		{System.out.println("Article id = " + id.image + "\n");}

		<COMMA>

		ArticleRequirements()

		(ArticleOptional())*
		(<COMMA>)?


	 	<CLOSE_BRACKET>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArticleRequirements(): {/*@bgen(jjtree) ArticleRequirements */
  SimpleNode jjtn000 = new SimpleNode(JJTARTICLEREQUIREMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArticleRequirements */
        try {
/*@egen*/
	<AUTHOR> <EQUAL> <STRING> <COMMA>
	<TITLE> <EQUAL> <STRING> <COMMA>
	<JOURNAL> <EQUAL> <STRING> <COMMA>
	<YEAR> <EQUAL> <DIGITS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArticleOptional(): {/*@bgen(jjtree) ArticleOptional */
  SimpleNode jjtn000 = new SimpleNode(JJTARTICLEOPTIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArticleOptional */
        try {
/*@egen*/
	<COMMA> // last fixed
	( 
		((<VOLUME> | <NUMBER> | <MONTH> | <NOTE> | <KEY>) <EQUAL> <STRING>)  |
		<PAGES> <EQUAL> <PAGESINPUT> 
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/** BOOK **/

void BookExpr() : {/*@bgen(jjtree) BookExpr */
                   SimpleNode jjtn000 = new SimpleNode(JJTBOOKEXPR);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token id;}
{/*@bgen(jjtree) BookExpr */
        try {
/*@egen*/
	<BOOK>
		<OPEN_BRACKET>
			id = <STRING>

			{ System.out.println("Book id = " + id.image + "\n"); }

			<COMMA>

			BookRequirements()
			(BookOptional())*
			(<COMMA>)?


	 	<CLOSE_BRACKET>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



void BookRequirements(): {/*@bgen(jjtree) BookRequirements */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOKREQUIREMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BookRequirements */
        try {
/*@egen*/
	<AUTHOR> <EQUAL> <STRING> <COMMA>
	<TITLE> <EQUAL> <STRING> <COMMA>
	<PUBLISHER> <EQUAL> <STRING> <COMMA>
	<YEAR> <EQUAL> <DIGITS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BookOptional(): {/*@bgen(jjtree) BookOptional */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOKOPTIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BookOptional */
        try {
/*@egen*/
	<COMMA>
	(<VOLUME> | <SERIES> | <ADDRESS> | <EDITION> | <MONTH> | <CROSSREF> | <NOTE> )
	<EQUAL> <STRING>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}






/** BOOKLET **/
void BookletExpr() : {/*@bgen(jjtree) BookletExpr */
                      SimpleNode jjtn000 = new SimpleNode(JJTBOOKLETEXPR);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token id; }
{/*@bgen(jjtree) BookletExpr */
        try {
/*@egen*/
	<BOOKLET>
		<OPEN_BRACKET>
			id = <STRING>

			{ System.out.println("Booklet id = " + id.image + "\n"); }

			<COMMA>

			BookletRequirements()

			(BookletOptional())*

			(<COMMA>)?


	 	<CLOSE_BRACKET>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void BookletRequirements(): {/*@bgen(jjtree) BookletRequirements */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOKLETREQUIREMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BookletRequirements */
        try {
/*@egen*/
	<TITLE> <EQUAL> <STRING>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



void BookletOptional(): {/*@bgen(jjtree) BookletOptional */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOKLETOPTIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BookletOptional */
        try {
/*@egen*/
	<COMMA>
	(((<AUTHOR> | <HOWPUBLISHED> | <ADDRESS> | <MONTH> | <CROSSREF> | <NOTE>)
	<EQUAL> <STRING>) | <YEAR> <EQUAL> <DIGITS> )/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/** CONFERENCE **/

void ConferenceExpr() : {/*@bgen(jjtree) ConferenceExpr */
                         SimpleNode jjtn000 = new SimpleNode(JJTCONFERENCEEXPR);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token id;}
{/*@bgen(jjtree) ConferenceExpr */
        try {
/*@egen*/
	<CONFERENCE>
	<OPEN_BRACKET>
		id = <STRING>

		{ System.out.println("Conference id = " + id.image + "\n"); }

		<COMMA>

		ConferenceRequirements()
		(ConferenceOptional())*
		(<COMMA>)?

	<CLOSE_BRACKET>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void ConferenceRequirements() : {/*@bgen(jjtree) ConferenceRequirements */
                                 SimpleNode jjtn000 = new SimpleNode(JJTCONFERENCEREQUIREMENTS);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token author;}
{/*@bgen(jjtree) ConferenceRequirements */
        try {
/*@egen*/
	<AUTHOR> <EQUAL> <STRING> <COMMA>
	<TITLE> <EQUAL> <STRING> <COMMA>
	<BOOKTITLE> <EQUAL> <STRING> <COMMA>
	<YEAR> <EQUAL> <DIGITS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

	
}


void ConferenceOptional(): {/*@bgen(jjtree) ConferenceOptional */
  SimpleNode jjtn000 = new SimpleNode(JJTCONFERENCEOPTIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConferenceOptional */
        try {
/*@egen*/
	<COMMA>
	(
	( (<EDITOR> | <VOLUME> | <SERIES> | <ADDRESS> | <MONTH> | <ORGANIZATION> | <PUBLISHER> | <CROSSREF> | <NOTE> ) <EQUAL> <STRING> ) |
		( <PAGES> <EQUAL> <PAGESINPUT>)
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/** INBOOK **/

void InbookExpr() : {/*@bgen(jjtree) InbookExpr */
                     SimpleNode jjtn000 = new SimpleNode(JJTINBOOKEXPR);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token id;}
{/*@bgen(jjtree) InbookExpr */
        try {
/*@egen*/
	<INBOOK>
	<OPEN_BRACKET>
		id = <STRING>

		{ System.out.println("Inbook id = " + id.image + "\n"); }

		<COMMA>

		InbookRequirements()
		(InbookOptional())*
		(<COMMA>)?

	<CLOSE_BRACKET>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void InbookRequirements() : {/*@bgen(jjtree) InbookRequirements */
                             SimpleNode jjtn000 = new SimpleNode(JJTINBOOKREQUIREMENTS);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token author;}
{/*@bgen(jjtree) InbookRequirements */
        try {
/*@egen*/
	<AUTHOR> <EQUAL> <STRING> <COMMA>
	<TITLE> <EQUAL> <STRING> <COMMA>
	<CHAPTER> <EQUAL> <STRING> <COMMA>
	<PUBLISHER> <EQUAL> <STRING> <COMMA>
	<YEAR> <EQUAL> <DIGITS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void InbookOptional(): {/*@bgen(jjtree) InbookOptional */
  SimpleNode jjtn000 = new SimpleNode(JJTINBOOKOPTIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InbookOptional */
        try {
/*@egen*/
	<COMMA>
	(<VOLUME> | <SERIES> | <TYPE> | <ADDRESS> | <MONTH> | <EDITION> | <CROSSREF> | <NOTE> )
	<EQUAL> <STRING>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}




/** INCOLLECTION **/

void IncollectionExpr() : {/*@bgen(jjtree) IncollectionExpr */
                           SimpleNode jjtn000 = new SimpleNode(JJTINCOLLECTIONEXPR);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token id;}
{/*@bgen(jjtree) IncollectionExpr */
        try {
/*@egen*/
	<INCOLLECTION>
	<OPEN_BRACKET>
		id = <STRING>

		{ System.out.println("Incollection id = " + id.image + "\n"); }

		<COMMA>

		IncollectionRequirements()
		(IncollectionOptional())*
		(<COMMA>)?

	<CLOSE_BRACKET>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void IncollectionRequirements() : {/*@bgen(jjtree) IncollectionRequirements */
  SimpleNode jjtn000 = new SimpleNode(JJTINCOLLECTIONREQUIREMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IncollectionRequirements */
        try {
/*@egen*/
	<AUTHOR> <EQUAL> <STRING> <COMMA>
	<TITLE> <EQUAL> <STRING> <COMMA>
	<BOOKTITLE> <EQUAL> <STRING> <COMMA>
	<PUBLISHER> <EQUAL> <STRING> <COMMA>
	<YEAR> <EQUAL> <DIGITS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void IncollectionOptional(): {/*@bgen(jjtree) IncollectionOptional */
  SimpleNode jjtn000 = new SimpleNode(JJTINCOLLECTIONOPTIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IncollectionOptional */
        try {
/*@egen*/
	<COMMA>
	(
		((<EDITOR> | <VOLUME> | <SERIES> | <TYPE> | <CHAPTER> | <ADDRESS> | <EDITION> | <ORGANIZATION> | 
		<PUBLISHER> | <MONTH> | <CROSSREF> | <NOTE> ) <EQUAL> <STRING>) 
		|
		(<PAGES> <EQUAL> <PAGESINPUT> )
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}